require('dotenv').config();
const Broker = require('rascal').BrokerAsPromised;
const rabbitConfig = require('../rabbit_config');
const {
    JOBS_SUB_PENDING,
    JOBS_PUB_COMPLETED,
} = require('../consts');
const scrape = require('../src/scrape');

(async () => {
    try {
        const broker = await Broker.create(rabbitConfig);
        broker.on('error', console.error);

        // Consume a message
        const subscription = await broker.subscribe(JOBS_SUB_PENDING);
        subscription.on('message', async (message, content, ackOrNack) => {
            const { chatId, username, password } = content;
            console.debug('received message from chatId: ' + chatId);
            try {
                const img = await scrape(username, password);
                const successPub = await broker.publish(JOBS_PUB_COMPLETED, {
                    chatId,
                    imgData: img.toString('binary'),
                });
                successPub.on('error', console.error);
                ackOrNack();
                console.debug('successfully handled message from chatId: ' + chatId);
            } catch (err) {
                console.error('error handling message from chatId: ' + chatId);
                console.error(err);
                ackOrNack(err, broker.config.recovery.deferred_retry);
            }
        }).on('redeliveries_exceeded', function(err, message, ackOrNack) {
            console.error('Redeliveries Exceeded', err.message)
            ackOrNack(err, broker.config.recovery.dead_letter)
        }).on('error', console.error);
    } catch (err) {
        console.error(err);
    }
})();
